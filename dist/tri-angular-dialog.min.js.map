{"version":3,"sources":["module/dialog-module.js","module/directives/dialog-mask.ts","module/directives/dialog-root.js","module/directives/dialog.js","module/services/dialog-manager.ts","module/services/dialog-utilities.js","module/services/dialog.js"],"names":["tri","dialog","noty","conf","baseZindex","rootClass","maskClass","dialogClass","mainNamespace","processTopOffset","eventCore","eventPrefix","eventOpen","eventClosing","eventClose","eventLoaded","eventError","eventRequested","eventTemplate","mod","angular","module","constant","tri.dialog","postLink","scope","element","attrs","rootCtrl","$transclude","root","parent","previousElement","currentElement","updateZIndex","mask","css","dialogConfig","dialogManager","dialogs","length","update","hasAny","namespace","clone","$animate","enter","remove","leave","$on","link","priority","require","restrict","terminal","transclude","preLink","addClass","on","upperDialog","getUpperDialog","modal","broadcast","accepted","notify","ClosingMask","reason","$digest","pre","post","run","$rootScope","$document","event","which","blockedDialog","hasRoot","getRoot","ClosingEsc","directive","controller","$scope","$attrs","_this","this","triDialogRoot","registerRoot","unRegisterRoot","extend","eType","eData","$broadcast","listen","eFn","dialogRootCtrl","removeClass","template","tElement","append","dialog_1","triDialogManipulator","$controller","$timeout","dialogUtilities","$transcludeFn","e","setController","dialogScope","dialogCtrl","$dialog","$data","data","controllerAs","getCss","zIndex","label","topOffset","top","getTopOffset","$new","Opening","Open","notification","dialogElementScope","closedDialog","dialogElement","Closed","$destroy","removeData","children","destroy","unRegisterDialog","triDialog","$log","$http","$compile","$templateCache","get","templateUrl","cache","success","response","innerLink","html","contents","TemplateLoaded","error","TemplateError","Error","$inject","tri.dialog.DialogManagerService","tri.dialog.DialogManagerService.constructor","tri.dialog.DialogManagerService.hasAny","tri.dialog.DialogManagerService.hasRoot","tri.dialog.DialogManagerService.getRoot","tri.dialog.DialogManagerService.getUpperDialog","tri.dialog.DialogManagerService.registerDialog","tri.dialog.DialogManagerService.unRegisterDialog","tri.dialog.DialogManagerService.triggerDialog","tri.dialog.DialogManagerService.closeDialog","tri.dialog.DialogManagerService.registerRoot","tri.dialog.DialogManagerService.unRegisterRoot","tri.dialog.config","docBody","document","body","docElem","documentElement","viewportStyle","isW3C","window","innerWidth","isIE","clientWidth","DialogUtilities","prototype","getViewportSize","width","height","innerHeight","clientHeight","getTopScroll","scrollTop","_vh","_ts","_parsed","parseInt","isNaN","isString","charAt","service","DialogData","config","$_dialogConfig","$_deferred","$_$q","defer","$_$log","promise","accept","close","cancel","reject","$_dialogManager","closeDialog","Cancelled","Accepted","Closing","key","resolve","hasOwnProperty","status","trigger","triggerDialog","factory","$q"],"mappings":"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","file":"tri-angular-dialog.min.js","sourcesContent":["var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        (function (noty) {\n            noty[noty[\"Accepted\"] = 0] = \"Accepted\";\n            noty[noty[\"Cancelled\"] = 1] = \"Cancelled\";\n            noty[noty[\"Closed\"] = 2] = \"Closed\";\n            noty[noty[\"Closing\"] = 3] = \"Closing\";\n            noty[noty[\"ClosingEsc\"] = 4] = \"ClosingEsc\";\n            noty[noty[\"ClosingMask\"] = 5] = \"ClosingMask\";\n            noty[noty[\"Open\"] = 6] = \"Open\";\n            noty[noty[\"Opening\"] = 7] = \"Opening\";\n            noty[noty[\"TemplateError\"] = 8] = \"TemplateError\";\n            noty[noty[\"TemplateLoaded\"] = 9] = \"TemplateLoaded\";\n        })(dialog.noty || (dialog.noty = {}));\n        var noty = dialog.noty;\n        dialog.conf = {\n            baseZindex: 3000,\n            rootClass: 'dialog-root',\n            maskClass: 'dialog-mask',\n            dialogClass: 'dialog',\n            mainNamespace: 'main',\n            processTopOffset: false,\n            eventCore: 'TriDialog',\n            eventPrefix: 'triDialog',\n            eventOpen: 'Open',\n            eventClosing: 'Closing',\n            eventClose: 'Close',\n            eventLoaded: 'Loaded',\n            eventError: 'Error',\n            eventRequested: 'Requested',\n            eventTemplate: 'Template'\n        };\n        dialog.mod = angular\n            .module('triNgDialog', ['ngAnimate'])\n            .constant('triDialogNoty', noty)\n            .constant('triDialogConfig', dialog.conf);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n","\nmodule tri.dialog {\n\n    'use strict';\n\n    mod.directive('triDialogMask', [\n        '$animate',\n        'triDialogConfig',\n        'triDialogManager',\n        function (\n            $animate: ng.IAnimateService,\n            dialogConfig: ITriDialogBaseConfig,\n            dialogManager: ITriDialogManagerService\n        ) {\n\n            var postLink = function (scope, element, attrs, rootCtrl, $transclude) {\n\n                var root: ng.IAugmentedJQuery = element.parent();\n                var previousElement: ng.IAugmentedJQuery = null;\n                var currentElement: ng.IAugmentedJQuery = null;\n\n                var updateZIndex = function (mask) {\n                    mask.css('z-index', dialogConfig.baseZindex + dialogManager.dialogs.length * 2 - 1);\n                };\n\n                var update = function () {\n                    if (dialogManager.hasAny(rootCtrl.namespace)) {\n                        if (currentElement) {\n                            updateZIndex(currentElement);\n                        } else {\n                            currentElement = $transclude((clone) => {\n                                $animate.enter(clone, root, element);\n                                updateZIndex(clone);\n                                if (previousElement) {\n                                    previousElement.remove();\n                                    previousElement = null;\n                                }\n                            });\n                        }\n                    } else if (currentElement) {\n                        $animate.leave(currentElement, function () {\n                            previousElement = null;\n                        });\n                        previousElement = currentElement;\n                        currentElement = null;\n                    }\n                };\n\n                scope.$on(rootCtrl.namespace + dialogConfig.eventCore + dialogConfig.eventOpen, update);\n                scope.$on(rootCtrl.namespace + dialogConfig.eventCore + dialogConfig.eventClosing, update);\n\n                $animate.leave(currentElement);\n            };\n\n            return {\n                link: postLink,\n                priority: 100,\n                require: '^triDialogRoot',\n                restrict: 'A',\n                terminal: true,\n                transclude: 'element'\n            };\n        }\n    ]);\n\n    mod.directive('triDialogMask', [\n        'triDialogManager',\n        'triDialogConfig',\n        function (dialogManager: ITriDialogManagerService, dialogConfig: ITriDialogBaseConfig) {\n            var preLink = function (scope, element, attrs, rootCtrl) {\n                element.addClass(rootCtrl.maskClass + ' ' + dialogConfig.maskClass);\n            };\n\n            var postLink = function (scope, element, attrs, rootCtrl) {\n                element.on('click', function () {\n                    var upperDialog = dialogManager.getUpperDialog();\n                    if (upperDialog && !upperDialog.modal) {\n                        rootCtrl.broadcast(dialogConfig.eventClose, {\n                            accepted: false,\n                            dialog: upperDialog.notify(noty.ClosingMask),\n                            reason: 'maskClick'\n                        });\n                        scope.$digest();\n                    }\n                });\n            };\n\n            return {\n                link: {\n                    pre: preLink,\n                    post: postLink\n                },\n                priority: -100,\n                require: '^triDialogRoot',\n                restrict: 'A'\n            };\n        }\n    ]);\n\n}\n\n\n","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        dialog.mod.run([\n            '$rootScope',\n            '$document',\n            'triDialogManager',\n            function ($rootScope, $document, dialogManager) {\n                // TODO: add some namespaces\n                $document.on('keydown keypress', function (event) {\n                    // kind'a imperative, but we do not know if ng-app/$rootElement is on body/html or not\n                    var upperDialog;\n                    if (event.which === 27 && dialogManager.dialogs.length) {\n                        upperDialog = dialogManager.getUpperDialog();\n                        if (!upperDialog.blockedDialog && dialogManager.hasRoot(upperDialog.namespace)) {\n                            dialogManager.getRoot(upperDialog.namespace).broadcast(dialog.conf.eventClose, {\n                                accepted: false,\n                                dialog: upperDialog.notify(dialog.noty.ClosingEsc),\n                                reason: 'esc'\n                            });\n                            $rootScope.$digest();\n                        }\n                    }\n                });\n            }\n        ]);\n        dialog.mod.directive('triDialogRoot', ['triDialogManager', function (dialogManager) {\n                var controller = function ($scope, $attrs, dialogManager) {\n                    var _this = this;\n                    this.namespace = $attrs.triDialogRoot || dialog.conf.mainNamespace;\n                    dialogManager.registerRoot(this);\n                    $scope.$on('$destroy', function () {\n                        dialogManager.unRegisterRoot(_this);\n                    });\n                    angular.extend(this, {\n                        maskClass: this.namespace + '-' + dialog.conf.maskClass,\n                        rootClass: this.namespace + '-' + dialog.conf.rootClass,\n                        dialogs: {},\n                        broadcast: function (eType, eData) {\n                            $scope.$broadcast(this.namespace + dialog.conf.eventCore + eType, eData);\n                        },\n                        listen: function (eType, eFn) {\n                            $scope.$on(this.namespace + dialog.conf.eventCore + eType, eFn);\n                        }\n                    });\n                };\n                var postLink = function (scope, element, attrs, dialogRootCtrl) {\n                    dialogRootCtrl.listen(dialog.conf.eventOpen, function () {\n                        element.addClass(dialog.conf.rootClass + ' ' + dialog.conf.rootClass);\n                    });\n                    dialogRootCtrl.listen(dialog.conf.eventClosing, function () {\n                        if (!dialogManager.hasAny(dialogRootCtrl.namespace)) {\n                            element.removeClass(dialogRootCtrl.rootClass + ' ' + dialog.conf.rootClass);\n                        }\n                    });\n                };\n                var template = function (tElement) {\n                    tElement.append('<div tri:dialog-mask/><div tri:dialog/>');\n                };\n                return {\n                    controller: ['$scope', '$attrs', 'triDialogManager', controller],\n                    link: postLink,\n                    require: 'triDialogRoot',\n                    restrict: 'A',\n                    template: template\n                };\n            }]);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog_1) {\n        'use strict';\n        triDialogManipulator.$inject = [\n            '$animate', '$rootScope', '$controller', '$timeout',\n            'triDialogManager', 'triDialogConfig', 'triDialogUtilities'\n        ];\n        function triDialogManipulator($animate, $rootScope, $controller, $timeout, dialogManager, dialogConfig, dialogUtilities) {\n            var postLink = function (scope, element, attrs, dialogRootCtrl, $transcludeFn) {\n                dialogRootCtrl.listen(dialogConfig.eventOpen, function (e, dialog) {\n                    var setController = function (clone, dialogScope) {\n                        var dialogCtrl = $controller(dialog.controller, {\n                            $dialog: dialog,\n                            $data: dialog.data,\n                            $scope: dialogScope\n                        });\n                        if (dialog.controllerAs) {\n                            dialogScope[dialog.controllerAs] = dialogCtrl;\n                        }\n                        clone.data('$triDialogController', dialogCtrl);\n                    };\n                    var getCss = function () {\n                        var css = {\n                            zIndex: dialogConfig.baseZindex + (dialog.label + 1) * 2\n                        };\n                        /* tslint:disable:triple-equals */\n                        if (dialogConfig.processTopOffset || dialog.topOffset != null) {\n                            /* tslint:enable:triple-equals */\n                            css.top = dialogUtilities.getTopOffset(dialog.topOffset);\n                        }\n                        return css;\n                    };\n                    $transcludeFn($rootScope.$new(), function (clone, dialogScope) {\n                        if (dialog.controller) {\n                            setController(clone, dialogScope);\n                        }\n                        else {\n                            dialogScope.$dialog = dialog;\n                        }\n                        clone\n                            .data('$triDialog', dialog)\n                            .css(getCss())\n                            .addClass(dialogConfig.dialogClass + ' ' + dialog.dialogClass);\n                        dialogRootCtrl.dialogs[dialog.label] = clone;\n                        $timeout(function () {\n                            dialog.notify(dialog_1.noty.Opening);\n                        }, 1);\n                        $animate.enter(clone, element.parent(), element, function () {\n                            dialog.notify(dialog_1.noty.Open);\n                        });\n                    });\n                });\n                dialogRootCtrl.listen(dialogConfig.eventClose, function (e, notification) {\n                    var closedDialog = notification.dialog;\n                    var dialogElement = dialogRootCtrl.dialogs[closedDialog.label];\n                    var dialogElementScope;\n                    if (dialogElement && dialogElement.data('$triDialog') === closedDialog) {\n                        dialogElementScope = dialogElement.scope();\n                        $animate.leave(dialogElement, function () {\n                            closedDialog.notify(dialog_1.noty.Closed);\n                            dialogElementScope.$destroy();\n                            dialogElement.removeData().children().removeData();\n                            closedDialog.destroy(notification);\n                            closedDialog = dialogElement = null;\n                        });\n                        delete dialogRootCtrl.dialogs[closedDialog.label];\n                        dialogManager.unRegisterDialog(closedDialog.label);\n                        dialogRootCtrl.broadcast(dialogConfig.eventClosing, closedDialog);\n                    }\n                });\n            };\n            return {\n                link: postLink,\n                require: '^triDialogRoot',\n                restrict: 'A',\n                scope: true,\n                transclude: 'element',\n                priority: 600\n            };\n        }\n        triDialog.$inject = ['$log', '$http', '$compile', '$templateCache', 'triDialogConfig'];\n        function triDialog($log, $http, $compile, $templateCache, dialogConfig) {\n            var postLink = function (scope, element) {\n                var dialog = element.data('$triDialog');\n                var dialogCtrl = element.data('$triDialogController');\n                $http.get(dialog.templateUrl, {\n                    cache: $templateCache\n                }).success(function (response) {\n                    var innerLink;\n                    element.html(response);\n                    innerLink = $compile(element.contents());\n                    if (dialogCtrl) {\n                        element.children().data('$triDialogController', dialogCtrl);\n                    }\n                    innerLink(scope);\n                    dialog.notify(dialog_1.noty.TemplateLoaded);\n                    scope.$broadcast(dialogConfig.eventPrefix + dialogConfig.eventTemplate + dialogConfig.eventLoaded);\n                }).error(function () {\n                    scope.$broadcast(dialogConfig.eventPrefix + dialogConfig.eventTemplate + dialogConfig.eventError);\n                    dialog.notify(dialog_1.noty.TemplateError);\n                    $log.error(new Error('triDialog: could not load template!'));\n                });\n                scope.$broadcast(dialogConfig.eventPrefix + dialogConfig.eventTemplate + dialogConfig.eventRequested);\n            };\n            return {\n                link: postLink,\n                require: '^triDialogRoot',\n                restrict: 'A'\n            };\n        }\n        dialog_1.mod.directive('triDialog', triDialog);\n        dialog_1.mod.directive('triDialog', triDialogManipulator);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n","\nmodule tri.dialog {\n\n    'use strict';\n\n    class DialogManagerService implements ITriDialogManagerService {\n\n        public dialogs: Array<ITriDialog> = [];\n        public roots: {[namespace: string]: ITriDialogRootCtrl} = {};\n\n        private $_$log: ng.ILogService;\n        private $_dialogConfig: ITriDialogBaseConfig;\n\n        hasAny(namespace: string): boolean {\n            return this.dialogs.some((dialog) => dialog.namespace === namespace);\n        }\n\n        hasRoot(namespace: string): boolean {\n            return this.roots.hasOwnProperty(namespace);\n        }\n\n        getRoot(namespace: string): ITriDialogRootCtrl {\n            return this.roots[namespace];\n        }\n\n        getUpperDialog(): ITriDialog {\n            var count = this.dialogs.length;\n            return count > 0 && this.dialogs[count - 1];\n        }\n\n        registerDialog(dialog: ITriDialog): ITriDialog {\n            dialog.label = this.dialogs.push(dialog) - 1;\n            return dialog;\n        }\n\n        unRegisterDialog(label: number): boolean {\n            var dialog = this.dialogs[label];\n            if (dialog && dialog.label === label) {\n                this.dialogs.splice(label, 1);\n                return true;\n            }\n            return false;\n        }\n\n        triggerDialog(dialog: ITriDialog): ITriDialogManagerService {\n            if (!this.roots.hasOwnProperty(dialog.namespace)) {\n                this.$_$log.error(new Error('TriDialog: rootCtrl ' + dialog.namespace + ' is not registered!'));\n                return this;\n            }\n            this.roots[dialog.namespace].broadcast(this.$_dialogConfig.eventOpen, this.registerDialog(dialog));\n            return this;\n        }\n\n        closeDialog(notification: ITriDialogPromiseFinalisation): ITriDialogManagerService {\n            if (!this.roots.hasOwnProperty(notification.dialog.namespace)) {\n                this.$_$log.error(\n                    new Error('TriDialog: rootCtrl ' + notification.dialog.namespace + ' is not registered!')\n                );\n                return this;\n            }\n            this.roots[notification.dialog.namespace].broadcast(this.$_dialogConfig.eventClose, notification);\n            return this;\n        }\n\n        registerRoot(ctrl: ITriDialogRootCtrl): ITriDialogManagerService {\n            if (!ctrl.namespace) {\n                this.$_$log.error(new Error('TriDialog: rootCtrl has no namespace assigned!'));\n                return this;\n            }\n            if (this.roots.hasOwnProperty(ctrl.namespace)) {\n                this.$_$log.error(new Error('TriDialog: rootCtrl ' + ctrl.namespace + ' already registered!'));\n                return this;\n            }\n            this.roots[ctrl.namespace] = ctrl;\n            return this;\n        }\n\n        unRegisterRoot(ctrl: ITriDialogRootCtrl): ITriDialogManagerService {\n            if (!this.roots.hasOwnProperty(ctrl.namespace)) {\n                this.$_$log.error(new Error('TriDialog: rootCtrl ' + ctrl.namespace + ' is not registered!'));\n                return this;\n            }\n            delete this.roots[ctrl.namespace];\n            return this;\n        }\n    }\n\n    mod.provider('triDialogManager', [\n        'triDialogConfig',\n        (triDialogConfig: ITriDialogBaseConfig): ITriDialogManagerProvider => ({\n            config(cfg) {\n                angular.extend(triDialogConfig, cfg);\n                return this;\n            },\n            $get: ['$log', 'triDialogConfig', (\n                $log: ng.ILogService,\n                triDialogConfig: ITriDialogBaseConfig\n            ): ITriDialogManagerService => {\n                angular.extend(DialogManagerService.prototype, {\n                    $_$log: $log,\n                    $_dialogConfig: triDialogConfig\n                });\n                return new DialogManagerService();\n            }]\n        })\n    ]);\n\n}","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        var docBody = document.body;\n        var docElem = document.documentElement;\n        /* tslint:disable:triple-equals */\n        var viewportStyle = {\n            isW3C: (typeof window.innerWidth != 'undefined'),\n            isIE: (typeof docElem != 'undefined' && typeof docElem.clientWidth != 'undefined' && docElem.clientWidth != 0)\n        };\n        /* tslint:enable:triple-equals */\n        var DialogUtilities = (function () {\n            function DialogUtilities() {\n            }\n            DialogUtilities.prototype.getViewportSize = function () {\n                if (viewportStyle.isW3C) {\n                    return {\n                        width: window.innerWidth,\n                        height: window.innerHeight\n                    };\n                }\n                if (viewportStyle.isIE) {\n                    return {\n                        width: docElem.clientWidth,\n                        height: docElem.clientHeight\n                    };\n                }\n                return {\n                    width: docBody.clientWidth,\n                    height: docBody.clientHeight\n                };\n            };\n            DialogUtilities.prototype.getTopScroll = function () {\n                return docBody.scrollTop || docElem.scrollTop;\n            };\n            DialogUtilities.prototype.getTopOffset = function (topOffset) {\n                var _vh = this.getViewportSize().height;\n                var _ts = this.getTopScroll();\n                var _parsed = parseInt(topOffset, 10);\n                /* tslint:disable:triple-equals */\n                if (topOffset == null) {\n                    /* tslint:enable:triple-equals */\n                    return _ts + _vh / 5 + 'px';\n                }\n                else if (!isNaN(_parsed)) {\n                    if (angular.isString(topOffset) && topOffset.charAt(topOffset.length - 1) === '%') {\n                        return _ts + _vh * _parsed / 100 + 'px';\n                    }\n                    return _ts + _parsed + 'px';\n                }\n                return _ts + 'px';\n            };\n            return DialogUtilities;\n        })();\n        dialog.mod.service('triDialogUtilities', DialogUtilities);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        var DialogData = (function () {\n            function DialogData(config, data) {\n                angular.extend(this, {\n                    blockedDialog: false,\n                    controller: null,\n                    controllerAs: null,\n                    dialogClass: '',\n                    topOffset: null,\n                    modal: false,\n                    namespace: this.$_dialogConfig.mainNamespace,\n                    templateUrl: null,\n                    $_deferred: this.$_$q.defer()\n                });\n                if (!config.templateUrl) {\n                    this.$_$log.error(new Error('triNgDialog.DialogData() - initialData must contain defined \"templateUrl\"'));\n                }\n                angular.extend(this, config, {\n                    data: data,\n                    modal: config.blockedDialog || config.modal || this.modal,\n                    promise: this.$_deferred.promise\n                });\n            }\n            DialogData.prototype.accept = function (reason) {\n                return this.close(reason, false);\n            };\n            DialogData.prototype.cancel = function (reason) {\n                return this.close(reason, true);\n            };\n            DialogData.prototype.close = function (reason, reject) {\n                this.$_dialogManager.closeDialog({\n                    accepted: !reject,\n                    dialog: this,\n                    reason: reason\n                });\n                /* tslint:disable:triple-equals */\n                if (reject != null) {\n                    /* tslint:enable:triple-equals */\n                    this.notify(reject === true ? dialog.noty.Cancelled : dialog.noty.Accepted);\n                }\n                return this.notify(dialog.noty.Closing);\n            };\n            DialogData.prototype.destroy = function (notification) {\n                var key;\n                if (notification.accepted) {\n                    this.$_deferred.resolve(notification.reason);\n                }\n                else {\n                    this.$_deferred.reject(notification.reason);\n                }\n                for (key in this) {\n                    if (this.hasOwnProperty(key)) {\n                        delete this[key];\n                    }\n                }\n            };\n            DialogData.prototype.notify = function (status) {\n                this.$_deferred.notify({ dialog: this, status: dialog.noty[status] });\n                return this;\n            };\n            DialogData.prototype.trigger = function () {\n                this.$_dialogManager.triggerDialog(this);\n                return this;\n            };\n            return DialogData;\n        })();\n        dialog.mod.factory('triDialog', [\n            '$log',\n            '$q',\n            'triDialogConfig',\n            'triDialogManager',\n            function ($log, $q, dialogConfig, dialogManager) {\n                angular.extend(DialogData.prototype, {\n                    $_$log: $log,\n                    $_$q: $q,\n                    $_dialogConfig: dialogConfig,\n                    $_dialogManager: dialogManager\n                });\n                return function (config, data) { return new DialogData(config, data).trigger(); };\n            }\n        ]);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n"],"sourceRoot":"/source/"}