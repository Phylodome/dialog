{"version":3,"sources":["module/dialog-module.ts","module/directives/dialog-mask.ts","module/directives/dialog-root.js","module/directives/dialog.ts","module/services/dialog-config.js","module/services/dialog-manager.ts","module/services/dialog-utilities.js","module/services/dialog.js"],"names":["tri","tri.dialog","postLink","scope","element","attrs","rootCtrl","$transclude","root","parent","previousElement","currentElement","updateZIndex","mask","css","dialogConfig","baseZindex","dialogManager","dialogs","length","update","hasAny","namespace","clone","$animate","enter","remove","leave","$on","eventCore","eventOpen","eventClosing","link","priority","require","restrict","terminal","transclude","preLink","addClass","maskClass","on","upperDialog","getUpperDialog","modal","broadcast","eventClose","$digest","pre","post","dialog","mod","run","$rootScope","$document","event","which","blockedDialog","$broadcast","directive","controller","$scope","$attrs","this","triDialogRoot","mainNamespace","registerRoot","angular","bind","unRegisterRoot","extend","rootClass","eType","eData","listen","eFn","dialogRootCtrl","removeClass","template","tElement","append","tri.dialog.triDialogManipulator","setController","dialogScope","dialogCtrl","$controller","$dialog","$data","data","controllerAs","getCss","zIndex","label","processTopOffset","topOffset","top","dialogUtilities","getTopOffset","$transcludeFn","$new","dialogClass","tri.dialog.triDialog","triDialogConfig","eventPrefix","eventLoaded","eventError","eventRequested","eventTemplate","constant","tri.dialog.DialogManagerService","tri.dialog.DialogManagerService.constructor","tri.dialog.DialogManagerService.hasAny","tri.dialog.DialogManagerService.getUpperDialog","tri.dialog.DialogManagerService.registerDialog","tri.dialog.DialogManagerService.unRegisterDialog","tri.dialog.DialogManagerService.triggerDialog","tri.dialog.DialogManagerService.closeDialog","tri.dialog.DialogManagerService.registerRoot","tri.dialog.DialogManagerService.unRegisterRoot","tri.dialog.config","docBody","document","body","docElem","documentElement","viewportStyle","isW3C","window","innerWidth","isIE","clientWidth","DialogUtilities","prototype","getViewportSize","width","height","innerHeight","clientHeight","getTopScroll","scrollTop","_vh","_ts","_parsed","parseInt","isNaN","isString","charAt","service","DialogData","config","$_dialogConfig","templateUrl","$_$log","error","Error","close","$_dialogManager","closeDialog","destroy","key","hasOwnProperty","trigger","triggerDialog","factory","$log"],"mappings":"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","file":"tri-angular-dialog.min.js","sourcesContent":["\nmodule tri.dialog {\n\n    'use strict';\n\n    export var mod = angular.module('triNgDialog', [\n        'ngAnimate'\n    ]);\n\n}","\nmodule tri.dialog {\n\n    'use strict';\n\n    mod.directive('triDialogMask', [\n        '$animate',\n        'triDialogConfig',\n        'triDialogManager',\n        function (\n            $animate: ng.IAnimateService,\n            dialogConfig: ITriDialogBaseConfig,\n            dialogManager: ITriDialogManagerService\n        ) {\n\n            var postLink = function (scope, element, attrs, rootCtrl, $transclude) {\n\n                var root: ng.IAugmentedJQuery = element.parent();\n                var previousElement: ng.IAugmentedJQuery = null;\n                var currentElement: ng.IAugmentedJQuery = null;\n\n                var updateZIndex = function (mask) {\n                    mask.css('z-index', dialogConfig.baseZindex + dialogManager.dialogs.length * 2 - 1);\n                };\n\n                var update = function () {\n                    if (dialogManager.hasAny(rootCtrl.namespace)) {\n                        if (currentElement) {\n                            updateZIndex(currentElement);\n                        } else {\n                            currentElement = $transclude((clone) => {\n                                $animate.enter(clone, root, element);\n                                updateZIndex(clone);\n                                if (previousElement) {\n                                    previousElement.remove();\n                                    previousElement = null;\n                                }\n                            });\n                        }\n                    } else if (currentElement) {\n                        $animate.leave(currentElement, function () {\n                            previousElement = null;\n                        });\n                        previousElement = currentElement;\n                        currentElement = null;\n                    }\n                };\n\n                scope.$on(rootCtrl.namespace + dialogConfig.eventCore + dialogConfig.eventOpen, update);\n                scope.$on(rootCtrl.namespace + dialogConfig.eventCore + dialogConfig.eventClosing, update);\n\n                $animate.leave(currentElement);\n            };\n\n            return {\n                link: postLink,\n                priority: 100,\n                require: '^triDialogRoot',\n                restrict: 'A',\n                terminal: true,\n                transclude: 'element'\n            };\n        }\n    ]);\n\n    mod.directive('triDialogMask', [\n        'triDialogManager',\n        'triDialogConfig',\n        function (dialogManager: ITriDialogManagerService, dialogConfig: ITriDialogBaseConfig) {\n            var preLink = function (scope, element, attrs, rootCtrl) {\n                element.addClass(rootCtrl.maskClass + ' ' + dialogConfig.maskClass);\n            };\n\n            var postLink = function (scope, element, attrs, rootCtrl) {\n                element.on('click', function () {\n                    var upperDialog = dialogManager.getUpperDialog();\n                    if (upperDialog && !upperDialog.modal) {\n                        rootCtrl.broadcast(dialogConfig.eventClose, upperDialog);\n                        scope.$digest();\n                    }\n                });\n            };\n\n            return {\n                link: {\n                    pre: preLink,\n                    post: postLink\n                },\n                priority: -100,\n                require: '^triDialogRoot',\n                restrict: 'A'\n            };\n        }\n    ]);\n\n}\n\n\n","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        dialog.mod.run([\n            '$rootScope',\n            '$document',\n            'triDialogConfig',\n            'triDialogManager',\n            function ($rootScope, $document, dialogConfig, dialogManager) {\n                // TODO: add some namespaces\n                $document.on('keydown keypress', function (event) {\n                    // kind'a imperative, but we do not know if ng-app/$rootElement is on body/html or not\n                    var upperDialog;\n                    if (event.which === 27 && dialogManager.dialogs.length) {\n                        upperDialog = dialogManager.getUpperDialog();\n                        if (!upperDialog.blockedDialog) {\n                            $rootScope.$broadcast(upperDialog.namespace + dialogConfig.eventCore + dialogConfig.eventClose, upperDialog);\n                            $rootScope.$digest();\n                        }\n                    }\n                });\n            }\n        ]);\n        dialog.mod.directive('triDialogRoot', [\n            'triDialogConfig',\n            'triDialogManager',\n            function (dialogConfig, dialogManager) {\n                var controller = function ($scope, $attrs, dialogConfig, dialogManager) {\n                    this.namespace = $attrs.triDialogRoot || dialogConfig.mainNamespace;\n                    dialogManager.registerRoot(this);\n                    $scope.$on('$destroy', angular.bind(this, function () {\n                        //noinspection JSPotentiallyInvalidUsageOfThis\n                        dialogManager.unRegisterRoot(this);\n                    }));\n                    return angular.extend(this, {\n                        maskClass: this.namespace + '-' + dialogConfig.maskClass,\n                        rootClass: this.namespace + '-' + dialogConfig.rootClass,\n                        dialogs: {},\n                        broadcast: function (eType, eData) {\n                            //noinspection JSPotentiallyInvalidUsageOfThis\n                            $scope.$broadcast(this.namespace + dialogConfig.eventCore + eType, eData);\n                        },\n                        listen: function (eType, eFn) {\n                            //noinspection JSPotentiallyInvalidUsageOfThis\n                            $scope.$on(this.namespace + dialogConfig.eventCore + eType, eFn);\n                        }\n                    });\n                };\n                var postLink = function (scope, element, attrs, dialogRootCtrl) {\n                    dialogRootCtrl.listen(dialogConfig.eventOpen, function () {\n                        element.addClass(dialogRootCtrl.rootClass + ' ' + dialogConfig.rootClass);\n                    });\n                    dialogRootCtrl.listen(dialogConfig.eventClosing, function () {\n                        if (!dialogManager.hasAny(dialogRootCtrl.namespace)) {\n                            element.removeClass(dialogRootCtrl.rootClass + ' ' + dialogConfig.rootClass);\n                        }\n                    });\n                };\n                var template = function (tElement) {\n                    tElement.append('<div tri:dialog-mask/><div tri:dialog/>');\n                };\n                return {\n                    controller: ['$scope', '$attrs', 'triDialogConfig', 'triDialogManager', controller],\n                    link: postLink,\n                    require: 'triDialogRoot',\n                    restrict: 'A',\n                    template: template\n                };\n            }\n        ]);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n","\nmodule tri.dialog {\n\n    'use strict';\n\n    triDialogManipulator.$inject =\n        ['$animate', '$rootScope', '$controller', 'triDialogManager', 'triDialogConfig', 'triDialogUtilities'];\n    function triDialogManipulator(\n        $animate: ng.IAnimateService,\n        $rootScope: ng.IRootScopeService,\n        $controller: ng.IControllerService,\n        dialogManager: ITriDialogManagerService,\n        dialogConfig: ITriDialogBaseConfig,\n        dialogUtilities: ITriDialogUtilitiesService\n    ) {\n\n        var postLink = (scope, element, attrs, dialogRootCtrl, $transcludeFn) => {\n\n            dialogRootCtrl.listen(dialogConfig.eventOpen, function (e, dialog) {\n\n                var setController = (clone, dialogScope) => {\n                    var dialogCtrl = $controller(dialog.controller, {\n                        $dialog: dialog,\n                        $data: dialog.data,\n                        $scope: dialogScope\n                    });\n                    if (dialog.controllerAs) {\n                        dialogScope[dialog.controllerAs] = dialogCtrl;\n                    }\n                    clone.data('$triDialogController', dialogCtrl);\n                };\n\n                var getCss = () => {\n                    var css: ITriDialogStyle = {\n                        zIndex: dialogConfig.baseZindex + (dialog.label + 1) * 2\n                    };\n                    if (dialogConfig.processTopOffset || dialog.topOffset != null) {\n                        css.top = dialogUtilities.getTopOffset(dialog.topOffset);\n                    }\n                    return css;\n                };\n\n                $transcludeFn($rootScope.$new(), (clone, dialogScope) => {\n\n                    if (dialog.controller) {\n                        setController(clone, dialogScope);\n                    } else {\n                        dialogScope.$dialog = dialog;\n                    }\n\n                    clone\n                        .data('$triDialog', dialog)\n                        .css(getCss())\n                        .addClass(dialogConfig.dialogClass + ' ' + dialog.dialogClass);\n\n                    dialogRootCtrl.dialogs[dialog.label] = clone;\n                    $animate.enter(clone, element.parent(), element);\n                });\n            });\n\n            dialogRootCtrl.listen(dialogConfig.eventClose, (e, closedDialog) => {\n                var dialogElement = dialogRootCtrl.dialogs[closedDialog.label];\n                var dialogElementScope;\n\n                if (dialogElement && dialogElement.data('$triDialog') === closedDialog) {\n                    dialogElementScope = dialogElement.scope();\n\n                    $animate.leave(dialogElement, () => {\n                        dialogElementScope.$destroy();\n                        dialogElement.removeData().children().removeData();\n                        closedDialog.destroy();\n                        closedDialog = dialogElement = null;\n                    });\n\n                    delete dialogRootCtrl.dialogs[closedDialog.label];\n                    dialogManager.unRegisterDialog(closedDialog.label);\n                    dialogRootCtrl.broadcast(dialogConfig.eventClosing, closedDialog);\n                }\n            });\n        };\n\n        return {\n            link: postLink,\n            require: '^triDialogRoot',\n            restrict: 'A',\n            scope: true,\n            transclude: 'element',\n            priority: 600\n        };\n    }\n\n    triDialog.$inject = ['$log', '$http', '$compile', '$templateCache', 'triDialogConfig'];\n    function triDialog(\n        $log: ng.ILogService,\n        $http: ng.IHttpService,\n        $compile: ng.ICompileService,\n        $templateCache: ng.ITemplateCacheService,\n        dialogConfig: ITriDialogBaseConfig\n    ) {\n\n        var postLink = (scope, element) => {\n\n            var dialog = element.data('$triDialog');\n            var dialogCtrl = element.data('$triDialogController');\n\n            $http\n                .get(dialog.templateUrl, {\n                    cache: $templateCache\n                })\n                .success((response) => {\n                    var innerLink;\n\n                    element.html(response);\n                    innerLink = $compile(element.contents());\n\n                    if (dialogCtrl) {\n                        element.children().data('$triDialogController', dialogCtrl);\n                    }\n\n                    innerLink(scope);\n                    scope.$broadcast(dialogConfig.eventPrefix + dialogConfig.eventTemplate + dialogConfig.eventLoaded);\n                })\n                .error(() => {\n                    scope.$broadcast(dialogConfig.eventPrefix + dialogConfig.eventTemplate + dialogConfig.eventError);\n                    $log.error(new Error('triDialog: could not load template!'));\n                });\n\n            scope.$broadcast(dialogConfig.eventPrefix + dialogConfig.eventTemplate + dialogConfig.eventRequested);\n\n        };\n\n        return {\n            link: postLink,\n            require: '^triDialogRoot',\n            restrict: 'A'\n        };\n    }\n\n    mod.directive('triDialog', triDialog);\n    mod.directive('triDialog', triDialogManipulator);\n\n}","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        var triDialogConfig = {\n            baseZindex: 3000,\n            rootClass: 'dialog-root',\n            maskClass: 'dialog-mask',\n            dialogClass: 'dialog',\n            mainNamespace: 'main',\n            processTopOffset: false,\n            eventCore: 'TriDialog',\n            eventPrefix: 'triDialog',\n            eventOpen: 'Open',\n            eventClosing: 'Closing',\n            eventClose: 'Close',\n            eventLoaded: 'Loaded',\n            eventError: 'Error',\n            eventRequested: 'Requested',\n            eventTemplate: 'Template'\n        };\n        dialog.mod.constant('triDialogConfig', triDialogConfig);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n","\nmodule tri.dialog {\n\n    'use strict';\n\n    class DialogManagerService implements ITriDialogManagerService {\n\n        public dialogs: Array<ITriDialog> = [];\n        public roots: {[namespace: string]: ITriDialogRootCtrl} = {};\n\n        private $_$log: ng.ILogService;\n        private $_dialogConfig: ITriDialogBaseConfig;\n\n        hasAny(namespace: string): boolean {\n            return this.dialogs.some((dialog) => dialog.namespace === namespace);\n        }\n\n        getUpperDialog(): ITriDialog {\n            var count = this.dialogs.length;\n            return count > 0 && this.dialogs[count - 1];\n        }\n\n        registerDialog(dialog: ITriDialog): ITriDialog {\n            dialog.label = this.dialogs.push(dialog) - 1;\n            return dialog;\n        }\n\n        unRegisterDialog(label: number): boolean {\n            var dialog = this.dialogs[label];\n            if (dialog && dialog.label === label) {\n                this.dialogs.splice(label, 1);\n                return true;\n            }\n            return false;\n        }\n\n        triggerDialog(dialog: ITriDialog): ITriDialogManagerService {\n            if (!this.roots.hasOwnProperty(dialog.namespace)) {\n                this.$_$log.error(new Error('TriDialog: rootCtrl ' + dialog.namespace + ' is not registered!'));\n                return this;\n            }\n            this.roots[dialog.namespace].broadcast(this.$_dialogConfig.eventOpen, this.registerDialog(dialog));\n            return this;\n        }\n\n        closeDialog(dialog: ITriDialog): ITriDialogManagerService {\n            if (!this.roots.hasOwnProperty(dialog.namespace)) {\n                this.$_$log.error(new Error('TriDialog: rootCtrl ' + dialog.namespace + ' is not registered!'));\n                return this;\n            }\n            this.roots[dialog.namespace].broadcast(this.$_dialogConfig.eventClose, dialog);\n            return this;\n        }\n\n        registerRoot(ctrl: ITriDialogRootCtrl): ITriDialogManagerService {\n            if (!ctrl.namespace) {\n                this.$_$log.error(new Error('TriDialog: rootCtrl has no namespace assigned!'));\n                return this;\n            }\n            if (this.roots.hasOwnProperty(ctrl.namespace)) {\n                this.$_$log.error(new Error('TriDialog: rootCtrl ' + ctrl.namespace + ' already registered!'));\n                return this;\n            }\n            this.roots[ctrl.namespace] = ctrl;\n            return this;\n        }\n\n        unRegisterRoot(ctrl: ITriDialogRootCtrl): ITriDialogManagerService {\n            if (!this.roots.hasOwnProperty(ctrl.namespace)) {\n                this.$_$log.error(new Error('TriDialog: rootCtrl ' + ctrl.namespace + ' is not registered!'));\n                return this;\n            }\n            delete this.roots[ctrl.namespace];\n            return this;\n        }\n    }\n\n    mod.provider('triDialogManager', ['triDialogConfig', (triDialogConfig: ITriDialogBaseConfig) => ({\n        config(cfg) {\n            angular.extend(triDialogConfig, cfg);\n            return this;\n        },\n        $get: ['$log', 'triDialogConfig', ($log: ng.ILogService, triDialogConfig: ITriDialogBaseConfig) => {\n            angular.extend(DialogManagerService.prototype, {\n                $_$log: $log,\n                $_dialogConfig: triDialogConfig\n            });\n            return new DialogManagerService();\n        }]\n    })]);\n\n}","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        var docBody = document.body;\n        var docElem = document.documentElement;\n        /* tslint:disable:triple-equals */\n        var viewportStyle = {\n            isW3C: (typeof window.innerWidth != 'undefined'),\n            isIE: (typeof docElem != 'undefined' && typeof docElem.clientWidth != 'undefined' && docElem.clientWidth != 0)\n        };\n        /* tslint:enable:triple-equals */\n        var DialogUtilities = (function () {\n            function DialogUtilities() {\n            }\n            DialogUtilities.prototype.getViewportSize = function () {\n                if (viewportStyle.isW3C) {\n                    return {\n                        width: window.innerWidth,\n                        height: window.innerHeight\n                    };\n                }\n                if (viewportStyle.isIE) {\n                    return {\n                        width: docElem.clientWidth,\n                        height: docElem.clientHeight\n                    };\n                }\n                return {\n                    width: docBody.clientWidth,\n                    height: docBody.clientHeight\n                };\n            };\n            DialogUtilities.prototype.getTopScroll = function () {\n                return docBody.scrollTop || docElem.scrollTop;\n            };\n            DialogUtilities.prototype.getTopOffset = function (topOffset) {\n                var _vh = this.getViewportSize().height;\n                var _ts = this.getTopScroll();\n                var _parsed = parseInt(topOffset, 10);\n                if (topOffset == null) {\n                    return _ts + _vh / 5 + 'px';\n                }\n                else if (!isNaN(_parsed)) {\n                    if (angular.isString(topOffset) && topOffset.charAt(topOffset.length - 1) === '%') {\n                        return _ts + _vh * _parsed / 100 + 'px';\n                    }\n                    return _ts + _parsed + 'px';\n                }\n                return _ts + 'px';\n            };\n            return DialogUtilities;\n        })();\n        dialog.mod.service('triDialogUtilities', DialogUtilities);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        var DialogData = (function () {\n            function DialogData(config, data) {\n                angular.extend(this, {\n                    blockedDialog: false,\n                    controller: null,\n                    controllerAs: null,\n                    dialogClass: '',\n                    topOffset: null,\n                    modal: false,\n                    namespace: this.$_dialogConfig.mainNamespace,\n                    templateUrl: null\n                });\n                if (!config.templateUrl) {\n                    this.$_$log.error(new Error('triNgDialog.DialogData() - initialData must contain defined \"templateUrl\"'));\n                }\n                if (config.blockedDialog) {\n                    this.modal = true;\n                }\n                angular.extend(this, config, { data: data });\n            }\n            DialogData.prototype.close = function () {\n                this.$_dialogManager.closeDialog(this);\n                return this;\n            };\n            DialogData.prototype.destroy = function () {\n                var key;\n                for (key in this) {\n                    if (this.hasOwnProperty(key)) {\n                        delete this[key];\n                    }\n                }\n            };\n            DialogData.prototype.trigger = function () {\n                this.$_dialogManager.triggerDialog(this);\n                return this;\n            };\n            return DialogData;\n        })();\n        dialog.mod.factory('triDialog', [\n            '$log',\n            'triDialogConfig',\n            'triDialogManager',\n            function ($log, dialogConfig, dialogManager) {\n                angular.extend(DialogData.prototype, {\n                    $_$log: $log,\n                    $_dialogConfig: dialogConfig,\n                    $_dialogManager: dialogManager\n                });\n                return function (config, data) { return new DialogData(config, data).trigger(); };\n            }\n        ]);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n"],"sourceRoot":"/source/"}