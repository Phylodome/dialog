{"version":3,"sources":["module/dialog-module.ts","module/directives/dialog-mask.ts","module/directives/dialog-root.ts","module/directives/dialog-root.js","module/directives/dialog.ts","module/services/dialog-manager.ts","module/services/dialog-utilities.ts","module/services/dialog-utilities.js","module/services/dialog.ts"],"names":["tri","tri.dialog","tri.dialog.noty","postLink","scope","element","attrs","rootCtrl","$transclude","root","parent","previousElement","currentElement","updateZIndex","mask","css","dialogConfig","baseZindex","dialogManager","dialogs","length","update","hasAny","namespace","clone","$animate","enter","remove","leave","$on","eventCore","eventOpen","eventClosing","link","priority","require","restrict","terminal","transclude","preLink","addClass","maskClass","on","upperDialog","getUpperDialog","modal","broadcast","eventClose","accepted","dialog","notify","noty","ClosingMask","reason","$digest","pre","post","$document","event","which","blockedDialog","hasRoot","getRoot","conf","ClosingEsc","$rootScope","_this","this","$attrs","triDialogRoot","mainNamespace","registerRoot","$scope","unRegisterRoot","angular","extend","rootClass","eType","eData","listen","eFn","tri.dialog.triDialogManipulator","setController","dialogScope","dialogCtrl","$controller","controller","$dialog","$data","data","controllerAs","getCss","zIndex","label","processTopOffset","topOffset","top","dialogUtilities","getTopOffset","$transcludeFn","$new","dialogClass","dialogRootCtrl","$timeout","dialog_1","Opening","Open","tri.dialog.triDialog","tri.dialog.triDialog.wrapperCloseClick","tri.dialog.DialogManagerService","tri.dialog.DialogManagerService.constructor","tri.dialog.DialogManagerService.hasAny","tri.dialog.DialogManagerService.hasRoot","tri.dialog.DialogManagerService.getRoot","tri.dialog.DialogManagerService.getUpperDialog","tri.dialog.DialogManagerService.registerDialog","tri.dialog.DialogManagerService.unRegisterDialog","tri.dialog.DialogManagerService.triggerDialog","tri.dialog.DialogManagerService.closeDialog","tri.dialog.DialogManagerService.registerRoot","tri.dialog.DialogManagerService.unRegisterRoot","tri.dialog.config","tri.dialog.when","DialogUtilities","tri.dialog.DialogUtilities","tri.dialog.DialogUtilities.getViewportSize","tri.dialog.DialogUtilities.getTopScroll","tri.dialog.DialogUtilities.getTopOffset","tri.dialog.DialogData","tri.dialog.DialogData.constructor","tri.dialog.DialogData.accept","tri.dialog.DialogData.cancel","tri.dialog.DialogData.close","tri.dialog.DialogData.destroy","tri.dialog.DialogData.notify","tri.dialog.DialogData.trigger"],"mappings":"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","file":"tri-angular-dialog.min.js","sourcesContent":["\nmodule tri.dialog {\n\n    'use strict';\n\n    export enum noty {\n        Accepted,\n        Cancelled,\n        Closed,\n        Closing,\n        ClosingEsc,\n        ClosingMask,\n        Open,\n        Opening,\n        TemplateError,\n        TemplateLoaded\n    }\n\n    export var conf: ITriDialogBaseConfig = {\n        baseZindex: 3000,\n        rootClass: 'dialog-root',\n        maskClass: 'dialog-mask',\n        dialogClass: 'dialog',\n        mainNamespace: 'main',\n        processTopOffset: false,\n        eventCore: 'TriDialog',\n        eventPrefix: 'triDialog',\n        eventOpen: 'Open',\n        eventClosing: 'Closing',\n        eventClose: 'Close',\n        eventLoaded: 'Loaded',\n        eventError: 'Error',\n        eventRequested: 'Requested',\n        eventTemplate: 'Template'\n    };\n\n    export var definitions: {[label: string]: ITriDialogConfig} = {};\n\n    export var mod = angular\n        .module('triNgDialog', ['ngAnimate'])\n        .constant('triDialogNoty', noty)\n        .constant('triDialogConfig', conf);\n\n}","\nmodule tri.dialog {\n\n    'use strict';\n\n    mod.directive('triDialogMask', [\n        '$animate',\n        'triDialogConfig',\n        'triDialogManager',\n        function (\n            $animate: angular.animate.IAnimateService,\n            dialogConfig: ITriDialogBaseConfig,\n            dialogManager: ITriDialogManagerService\n        ) {\n\n            var postLink = function (scope, element, attrs, rootCtrl, $transclude) {\n\n                var root: angular.IAugmentedJQuery = element.parent();\n                var previousElement: angular.IAugmentedJQuery = null;\n                var currentElement: angular.IAugmentedJQuery = null;\n\n                var updateZIndex = function (mask) {\n                    mask.css('z-index', dialogConfig.baseZindex + dialogManager.dialogs.length * 2 - 1);\n                };\n\n                var update = function () {\n                    if (dialogManager.hasAny(rootCtrl.namespace)) {\n                        if (currentElement) {\n                            updateZIndex(currentElement);\n                        } else {\n                            currentElement = $transclude((clone) => {\n                                $animate.enter(clone, root, element);\n                                updateZIndex(clone);\n                                if (previousElement) {\n                                    previousElement.remove();\n                                    previousElement = null;\n                                }\n                            });\n                        }\n                    } else if (currentElement) {\n                        $animate.leave(currentElement).finally(() => {\n                            previousElement = null;\n                        });\n                        previousElement = currentElement;\n                        currentElement = null;\n                    }\n                };\n\n                scope.$on(rootCtrl.namespace + dialogConfig.eventCore + dialogConfig.eventOpen, update);\n                scope.$on(rootCtrl.namespace + dialogConfig.eventCore + dialogConfig.eventClosing, update);\n\n            };\n\n            return {\n                link: postLink,\n                priority: 100,\n                require: '^triDialogRoot',\n                restrict: 'EA',\n                terminal: true,\n                transclude: 'element'\n            };\n        }\n    ]);\n\n    mod.directive('triDialogMask', [\n        'triDialogManager',\n        'triDialogConfig',\n        function (dialogManager: ITriDialogManagerService, dialogConfig: ITriDialogBaseConfig) {\n            var preLink = function (scope, element, attrs, rootCtrl) {\n                element.addClass(rootCtrl.maskClass + ' ' + dialogConfig.maskClass);\n            };\n\n            var postLink = function (scope, element, attrs, rootCtrl) {\n                element.on('click', function () {\n                    var upperDialog = dialogManager.getUpperDialog();\n                    if (upperDialog && !upperDialog.modal) {\n                        rootCtrl.broadcast(dialogConfig.eventClose, {\n                            accepted: false,\n                            dialog: upperDialog.notify(noty.ClosingMask),\n                            reason: 'maskClick'\n                        });\n                        scope.$digest();\n                    }\n                });\n            };\n\n            return {\n                link: {\n                    pre: preLink,\n                    post: postLink\n                },\n                priority: -100,\n                require: '^triDialogRoot',\n                restrict: 'EA'\n            };\n        }\n    ]);\n\n}\n\n\n","\nmodule tri.dialog {\n\n    'use strict';\n\n    mod.run([\n        '$rootScope',\n        '$document',\n        'triDialogManager',\n        function (\n            $rootScope: angular.IRootScopeService,\n            $document: angular.IDocumentService,\n            dialogManager: ITriDialogManagerService\n        ) {\n\n            // TODO: add some namespaces\n            $document.on('keydown keypress', function (event) {\n                // kind'a imperative, but we do not know if ng-app/$rootElement is on body/html or not\n                var upperDialog: ITriDialog;\n                if (event.which === 27 && dialogManager.dialogs.length) {\n                    upperDialog = dialogManager.getUpperDialog();\n                    if (!upperDialog.blockedDialog && dialogManager.hasRoot(upperDialog.namespace)) {\n                        dialogManager.getRoot(upperDialog.namespace).broadcast(conf.eventClose, {\n                            accepted: false,\n                            dialog: upperDialog.notify(noty.ClosingEsc),\n                            reason: 'esc'\n                        });\n                        $rootScope.$digest();\n                    }\n                }\n            });\n\n        }\n    ]);\n\n\n    mod.directive('triDialogRoot', ['$animate', 'triDialogManager', (\n        $animate: angular.IAnimateService,\n        dialogManager: ITriDialogManagerService\n    ) => {\n\n        var controller = function (\n            $scope,\n            $attrs,\n            dialogManager: ITriDialogManagerService\n        ) {\n            this.namespace = $attrs.triDialogRoot || conf.mainNamespace;\n            dialogManager.registerRoot(this);\n            $scope.$on('$destroy', () => {\n                dialogManager.unRegisterRoot(this);\n            });\n            angular.extend(this, {\n                maskClass: this.namespace + '-' + conf.maskClass,\n                rootClass: this.namespace + '-' + conf.rootClass,\n                dialogs: {},\n\n                broadcast(eType, eData) {\n                    $scope.$broadcast(this.namespace + conf.eventCore + eType, eData);\n                },\n\n                listen(eType, eFn) {\n                    $scope.$on(this.namespace + conf.eventCore + eType, eFn);\n                }\n\n            });\n        };\n\n        var postLink = (scope, element, attrs, dialogRootCtrl) => {\n            const rootClass = dialogRootCtrl.rootClass + ' ' + conf.rootClass;\n\n            dialogRootCtrl.listen(conf.eventOpen, () => {\n                $animate.addClass(element, rootClass);\n            });\n\n            dialogRootCtrl.listen(conf.eventClosing, () => {\n                if (!dialogManager.hasAny(dialogRootCtrl.namespace)) {\n                    $animate.removeClass(element, rootClass);\n                }\n            });\n        };\n\n        var template = (tElement) => {\n            if (!tElement.find('tri-dialog')[0]) {\n                tElement.append('<div tri-dialog-mask/><div tri-dialog/>');\n            }\n        };\n\n        return {\n            controller: ['$scope', '$attrs', 'triDialogManager', controller],\n            link: postLink,\n            require: 'triDialogRoot',\n            restrict: 'A',\n            template: template\n        };\n    }]);\n\n}","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        dialog.mod.run([\n            '$rootScope',\n            '$document',\n            'triDialogManager',\n            function ($rootScope, $document, dialogManager) {\n                // TODO: add some namespaces\n                $document.on('keydown keypress', function (event) {\n                    // kind'a imperative, but we do not know if ng-app/$rootElement is on body/html or not\n                    var upperDialog;\n                    if (event.which === 27 && dialogManager.dialogs.length) {\n                        upperDialog = dialogManager.getUpperDialog();\n                        if (!upperDialog.blockedDialog && dialogManager.hasRoot(upperDialog.namespace)) {\n                            dialogManager.getRoot(upperDialog.namespace).broadcast(dialog.conf.eventClose, {\n                                accepted: false,\n                                dialog: upperDialog.notify(dialog.noty.ClosingEsc),\n                                reason: 'esc'\n                            });\n                            $rootScope.$digest();\n                        }\n                    }\n                });\n            }\n        ]);\n        dialog.mod.directive('triDialogRoot', ['$animate', 'triDialogManager', function ($animate, dialogManager) {\n                var controller = function ($scope, $attrs, dialogManager) {\n                    var _this = this;\n                    this.namespace = $attrs.triDialogRoot || dialog.conf.mainNamespace;\n                    dialogManager.registerRoot(this);\n                    $scope.$on('$destroy', function () {\n                        dialogManager.unRegisterRoot(_this);\n                    });\n                    angular.extend(this, {\n                        maskClass: this.namespace + '-' + dialog.conf.maskClass,\n                        rootClass: this.namespace + '-' + dialog.conf.rootClass,\n                        dialogs: {},\n                        broadcast: function (eType, eData) {\n                            $scope.$broadcast(this.namespace + dialog.conf.eventCore + eType, eData);\n                        },\n                        listen: function (eType, eFn) {\n                            $scope.$on(this.namespace + dialog.conf.eventCore + eType, eFn);\n                        }\n                    });\n                };\n                var postLink = function (scope, element, attrs, dialogRootCtrl) {\n                    var rootClass = dialogRootCtrl.rootClass + ' ' + dialog.conf.rootClass;\n                    dialogRootCtrl.listen(dialog.conf.eventOpen, function () {\n                        $animate.addClass(element, rootClass);\n                    });\n                    dialogRootCtrl.listen(dialog.conf.eventClosing, function () {\n                        if (!dialogManager.hasAny(dialogRootCtrl.namespace)) {\n                            $animate.removeClass(element, rootClass);\n                        }\n                    });\n                };\n                var template = function (tElement) {\n                    if (!tElement.find('tri-dialog')[0]) {\n                        tElement.append('<div tri-dialog-mask/><div tri-dialog/>');\n                    }\n                };\n                return {\n                    controller: ['$scope', '$attrs', 'triDialogManager', controller],\n                    link: postLink,\n                    require: 'triDialogRoot',\n                    restrict: 'A',\n                    template: template\n                };\n            }]);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n","\nmodule tri.dialog {\n\n    'use strict';\n\n    triDialogManipulator.$inject = [\n        '$animate', '$rootScope', '$controller', '$timeout',\n        'triDialogManager', 'triDialogConfig', 'triDialogUtilities'\n    ];\n    function triDialogManipulator(\n        $animate: angular.animate.IAnimateService,\n        $rootScope: angular.IRootScopeService,\n        $controller: angular.IControllerService,\n        $timeout: angular.ITimeoutService,\n        dialogManager: ITriDialogManagerService,\n        dialogConfig: ITriDialogBaseConfig,\n        dialogUtilities: ITriDialogUtilitiesService\n    ) {\n\n        var postLink = (scope, element, attrs, dialogRootCtrl, $transcludeFn) => {\n\n            dialogRootCtrl.listen(dialogConfig.eventOpen, function (e, dialog: ITriDialog) {\n\n                var setController = (clone, dialogScope) => {\n                    var dialogCtrl = $controller(dialog.controller, {\n                        $dialog: dialog,\n                        $data: dialog.data,\n                        $scope: dialogScope\n                    });\n                    if (dialog.controllerAs) {\n                        dialogScope[dialog.controllerAs] = dialogCtrl;\n                    }\n                    clone.data('$triDialogController', dialogCtrl);\n                };\n\n                var getCss = () => {\n                    var css: ITriDialogStyle = {\n                        zIndex: dialogConfig.baseZindex + (dialog.label + 1) * 2\n                    };\n                    /* tslint:disable:triple-equals */\n                    if (dialogConfig.processTopOffset || dialog.topOffset != null) {\n                        /* tslint:enable:triple-equals */\n                        css.top = dialogUtilities.getTopOffset(dialog.topOffset);\n                    }\n                    return css;\n                };\n\n                $transcludeFn($rootScope.$new(), (clone, dialogScope) => {\n\n                    if (dialog.controller) {\n                        setController(clone, dialogScope);\n                    } else {\n                        dialogScope.$dialog = dialog;\n                    }\n\n                    clone\n                        .data('$triDialog', dialog)\n                        .css(getCss())\n                        .addClass(dialogConfig.dialogClass + ' ' + dialog.dialogClass);\n\n                    dialogRootCtrl.dialogs[dialog.label] = clone;\n\n                    $timeout(() => {\n                        dialog.notify(noty.Opening);\n                    }, 1);\n\n                    $animate.enter(clone, element.parent(), element).finally(() => {\n                        dialog.notify(noty.Open);\n                    });\n                });\n            });\n\n            dialogRootCtrl.listen(dialogConfig.eventClose, (e, notification: ITriDialogPromiseFinalisation) => {\n                var closedDialog: ITriDialog = notification.dialog;\n                var dialogElement = dialogRootCtrl.dialogs[closedDialog.label];\n                var dialogElementScope;\n\n                if (dialogElement && dialogElement.data('$triDialog') === closedDialog) {\n                    dialogElementScope = dialogElement.scope();\n\n                    $animate.leave(dialogElement).finally(() => {\n                        closedDialog.notify(noty.Closed);\n                        dialogElementScope.$destroy();\n                        dialogElement.removeData().children().removeData();\n                        closedDialog.destroy(notification);\n                        closedDialog = dialogElement = null;\n                    });\n\n                    delete dialogRootCtrl.dialogs[closedDialog.label];\n                    dialogManager.unRegisterDialog(closedDialog.label);\n                    dialogRootCtrl.broadcast(dialogConfig.eventClosing, closedDialog);\n                }\n            });\n        };\n\n        return {\n            link: postLink,\n            require: '^triDialogRoot',\n            restrict: 'EA',\n            scope: true,\n            transclude: 'element',\n            priority: 600\n        };\n    }\n\n    triDialog.$inject = ['$http', '$compile', '$templateCache', 'triDialogConfig'];\n    function triDialog(\n        $http: angular.IHttpService,\n        $compile: angular.ICompileService,\n        $templateCache: angular.ITemplateCacheService,\n        dialogConfig: ITriDialogBaseConfig\n    ) {\n\n        var postLink = (scope, element, attrs, dialogRootCtrl) => {\n\n            const dialog: ITriDialog = element.data('$triDialog');\n            const dialogCtrl = element.data('$triDialogController');\n\n            function wrapperCloseClick(e: MouseEvent): void {\n                if (!dialog.modal && e.target === element[0]) {\n                    element.off('click', wrapperCloseClick);\n                    dialogRootCtrl.broadcast(dialogConfig.eventClose, {\n                        accepted: false,\n                        dialog: dialog.notify(noty.ClosingMask),\n                        reason: 'maskClick'\n                    });\n                    scope.$digest();\n                }\n            }\n\n            // simulate that wrapper is a mask\n            if (attrs.hasOwnProperty('triIsMask')) {\n                element.on('click', wrapperCloseClick);\n            }\n\n            $http.get(dialog.templateUrl, {\n                cache: $templateCache\n            }).success((response: string) => {\n                const contentElement: angular.IAugmentedJQuery = element.find('tri-dialog-content');\n                let innerLink: angular.ITemplateLinkingFunction;\n\n                if (contentElement[0]) {\n                    contentElement.html(response);\n                } else {\n                    element.html(response);\n                }\n\n                innerLink = $compile(element.contents());\n\n                if (dialogCtrl) {\n                    element.children().data('$triDialogController', dialogCtrl);\n                }\n\n                innerLink(scope);\n                dialog.notify(noty.TemplateLoaded);\n                scope.$broadcast(dialogConfig.eventPrefix + dialogConfig.eventTemplate + dialogConfig.eventLoaded);\n            }).error(() => {\n                scope.$broadcast(dialogConfig.eventPrefix + dialogConfig.eventTemplate + dialogConfig.eventError);\n                dialog.notify(noty.TemplateError);\n                throw new Error('triDialog: could not load template!');\n            });\n\n            scope.$broadcast(dialogConfig.eventPrefix + dialogConfig.eventTemplate + dialogConfig.eventRequested);\n\n        };\n\n        return {\n            link: postLink,\n            require: '^triDialogRoot',\n            restrict: 'EA'\n        };\n    }\n\n    mod.directive('triDialog', triDialog);\n    mod.directive('triDialog', triDialogManipulator);\n\n}","\nmodule tri.dialog {\n\n    'use strict';\n\n    class DialogManagerService implements ITriDialogManagerService {\n\n        public dialogs: Array<ITriDialog> = [];\n        public roots: {[namespace: string]: ITriDialogRootCtrl} = {};\n\n        hasAny(namespace: string): boolean {\n            return this.dialogs.some((dialog) => dialog.namespace === namespace);\n        }\n\n        hasRoot(namespace: string): boolean {\n            return this.roots.hasOwnProperty(namespace);\n        }\n\n        getRoot(namespace: string): ITriDialogRootCtrl {\n            return this.roots[namespace];\n        }\n\n        getUpperDialog(): ITriDialog {\n            var count = this.dialogs.length;\n            return count > 0 && this.dialogs[count - 1];\n        }\n\n        registerDialog(dialog: ITriDialog): ITriDialog {\n            dialog.label = this.dialogs.push(dialog) - 1;\n            return dialog;\n        }\n\n        unRegisterDialog(label: number): boolean {\n            var dialog = this.dialogs[label];\n            if (dialog && dialog.label === label) {\n                this.dialogs.splice(label, 1);\n                return true;\n            }\n            return false;\n        }\n\n        triggerDialog(dialog: ITriDialog): ITriDialogManagerService {\n            if (!this.roots.hasOwnProperty(dialog.namespace)) {\n                throw new Error('TriDialog: rootCtrl ' + dialog.namespace + ' is not registered!');\n            }\n            this.roots[dialog.namespace].broadcast(conf.eventOpen, this.registerDialog(dialog));\n            return this;\n        }\n\n        closeDialog(notification: ITriDialogPromiseFinalisation): ITriDialogManagerService {\n            if (!this.roots.hasOwnProperty(notification.dialog.namespace)) {\n                throw new Error('TriDialog: rootCtrl ' + notification.dialog.namespace + ' is not registered!');\n            }\n            this.roots[notification.dialog.namespace].broadcast(conf.eventClose, notification);\n            return this;\n        }\n\n        registerRoot(ctrl: ITriDialogRootCtrl): ITriDialogManagerService {\n            if (!ctrl.namespace) {\n                throw new Error('TriDialog: rootCtrl has no namespace assigned!');\n            }\n            if (this.roots.hasOwnProperty(ctrl.namespace)) {\n                throw new Error('TriDialog: rootCtrl ' + ctrl.namespace + ' already registered!');\n            }\n            this.roots[ctrl.namespace] = ctrl;\n            return this;\n        }\n\n        unRegisterRoot(ctrl: ITriDialogRootCtrl): ITriDialogManagerService {\n            if (!this.roots.hasOwnProperty(ctrl.namespace)) {\n                throw new Error('TriDialog: rootCtrl ' + ctrl.namespace + ' is not registered!');\n            }\n            delete this.roots[ctrl.namespace];\n            return this;\n        }\n    }\n\n    mod.provider('triDialogManager', [\n        'triDialogConfig',\n        (triDialogConfig: ITriDialogBaseConfig): ITriDialogManagerProvider => ({\n            config(cfg: ITriDialogProviderConfig): ITriDialogManagerProvider {\n                angular.extend(triDialogConfig, cfg);\n                return this;\n            },\n            when(label: string, config: ITriDialogConfig): ITriDialogManagerProvider {\n                definitions[label] = config;\n                return this;\n            },\n            $get: () => new DialogManagerService()\n        })\n    ]);\n\n}","\nmodule tri.dialog {\n\n    'use strict';\n\n    var docBody = document.body;\n    var docElem = document.documentElement;\n\n    /* tslint:disable:triple-equals */\n    var viewportStyle = {\n        isW3C: (typeof window.innerWidth != 'undefined'),\n        isIE: (typeof docElem != 'undefined' && typeof docElem.clientWidth != 'undefined' && docElem.clientWidth != 0)\n    };\n    /* tslint:enable:triple-equals */\n\n    class DialogUtilities implements ITriDialogUtilitiesService {\n\n        getViewportSize(): ITriElementSize {\n            if (viewportStyle.isW3C) {\n                return {\n                    width: window.innerWidth,\n                    height: window.innerHeight\n                };\n            }\n            if (viewportStyle.isIE) {\n                return {\n                    width: docElem.clientWidth,\n                    height: docElem.clientHeight\n                };\n            }\n            return {\n                width: docBody.clientWidth,\n                height: docBody.clientHeight\n            };\n        }\n\n        getTopScroll(): number {\n            return docBody.scrollTop || docElem.scrollTop;\n        }\n\n        getTopOffset(topOffset?: any): string {\n            var _vh = this.getViewportSize().height;\n            var _ts = this.getTopScroll();\n            var _parsed = parseInt(topOffset, 10);\n\n            /* tslint:disable:triple-equals */\n            if (topOffset == null) {\n                /* tslint:enable:triple-equals */\n                return _ts + _vh / 5 + 'px';\n            } else if (!isNaN(_parsed)) {\n                if (angular.isString(topOffset) && topOffset.charAt(topOffset.length - 1) === '%') {\n                    return _ts + _vh * _parsed / 100 + 'px';\n                }\n                return _ts + _parsed + 'px';\n            }\n            return _ts + 'px';\n\n        }\n\n    }\n\n    mod.service('triDialogUtilities', DialogUtilities);\n\n}","var tri;\n(function (tri) {\n    var dialog;\n    (function (dialog) {\n        'use strict';\n        var docBody = document.body;\n        var docElem = document.documentElement;\n        /* tslint:disable:triple-equals */\n        var viewportStyle = {\n            isW3C: (typeof window.innerWidth != 'undefined'),\n            isIE: (typeof docElem != 'undefined' && typeof docElem.clientWidth != 'undefined' && docElem.clientWidth != 0)\n        };\n        /* tslint:enable:triple-equals */\n        var DialogUtilities = (function () {\n            function DialogUtilities() {\n            }\n            DialogUtilities.prototype.getViewportSize = function () {\n                if (viewportStyle.isW3C) {\n                    return {\n                        width: window.innerWidth,\n                        height: window.innerHeight\n                    };\n                }\n                if (viewportStyle.isIE) {\n                    return {\n                        width: docElem.clientWidth,\n                        height: docElem.clientHeight\n                    };\n                }\n                return {\n                    width: docBody.clientWidth,\n                    height: docBody.clientHeight\n                };\n            };\n            DialogUtilities.prototype.getTopScroll = function () {\n                return docBody.scrollTop || docElem.scrollTop;\n            };\n            DialogUtilities.prototype.getTopOffset = function (topOffset) {\n                var _vh = this.getViewportSize().height;\n                var _ts = this.getTopScroll();\n                var _parsed = parseInt(topOffset, 10);\n                /* tslint:disable:triple-equals */\n                if (topOffset == null) {\n                    /* tslint:enable:triple-equals */\n                    return _ts + _vh / 5 + 'px';\n                }\n                else if (!isNaN(_parsed)) {\n                    if (angular.isString(topOffset) && topOffset.charAt(topOffset.length - 1) === '%') {\n                        return _ts + _vh * _parsed / 100 + 'px';\n                    }\n                    return _ts + _parsed + 'px';\n                }\n                return _ts + 'px';\n            };\n            return DialogUtilities;\n        })();\n        dialog.mod.service('triDialogUtilities', DialogUtilities);\n    })(dialog = tri.dialog || (tri.dialog = {}));\n})(tri || (tri = {}));\n","\nmodule tri.dialog {\n\n    'use strict';\n\n    class DialogData implements ITriDialog {\n\n        public blockedDialog: boolean;\n        public controller: string;\n        public controllerAs: string;\n        public dialogClass: string;\n        public topOffset: any;\n        public label: number;\n        public modal: boolean;\n        public namespace: string;\n        public templateUrl: string;\n        public data: any;\n        public promise: angular.IPromise<any>;\n\n        private $_deferred: angular.IDeferred<any>;\n\n        private $_$q: angular.IQService;\n        private $_dialogManager: ITriDialogManagerService;\n\n        constructor(config: ITriDialogConfig, data?: any) {\n\n            angular.extend(this, {\n                blockedDialog: false,\n                controller: null,\n                controllerAs: null,\n                dialogClass: '',\n                topOffset: null,\n                modal: false,\n                namespace: conf.mainNamespace,\n                templateUrl: null,\n                $_deferred: this.$_$q.defer()\n            });\n\n            if (!config.templateUrl) {\n                throw new Error('triNgDialog.DialogData() - initialData must contain defined \"templateUrl\"');\n            }\n            angular.extend(this, config, {\n                data: data,\n                modal: config.blockedDialog || config.modal || this.modal,\n                promise: this.$_deferred.promise\n            });\n        }\n\n\n        public accept(reason?: any): ITriDialog {\n            return this.close(reason, false);\n        }\n\n        public cancel(reason?: any): ITriDialog {\n            return this.close(reason, true);\n        }\n\n        public close(reason?: any, reject?: boolean): ITriDialog {\n            this.$_dialogManager.closeDialog({\n                accepted: !reject,\n                dialog: this,\n                reason: reason\n            });\n            /* tslint:disable:triple-equals */\n            if (reject != null) {\n                /* tslint:enable:triple-equals */\n                this.notify(reject === true ? noty.Cancelled : noty.Accepted);\n            }\n            return this.notify(noty.Closing);\n        }\n\n        public destroy(notification: ITriDialogPromiseFinalisation): void {\n            var key;\n            if (notification.accepted) {\n                this.$_deferred.resolve(notification.reason);\n            } else {\n                this.$_deferred.reject(notification.reason);\n            }\n            for (key in this) {\n                if (this.hasOwnProperty(key)) {\n                    delete this[key];\n                }\n            }\n        }\n\n        public notify(status: number): ITriDialog {\n            this.$_deferred.notify({dialog: this, status: noty[status]});\n            return this;\n        }\n\n        public trigger(): ITriDialog {\n            this.$_dialogManager.triggerDialog(this);\n            return this;\n        }\n\n    }\n\n    mod.factory('triDialog', ['$q', 'triDialogManager', (\n        $q: angular.IQService,\n        dialogManager: ITriDialogManagerService\n    ): ITriDialogService => {\n        angular.extend(DialogData.prototype, {\n            $_$q: $q,\n            $_dialogManager: dialogManager\n        });\n        return (config: any, data?: any) => {\n            if (angular.isString(config)) {\n                config = definitions[config];\n            }\n            if (!config || !angular.isObject(config)) {\n                throw new TypeError('First argument passed to triDialog service should be valid string or object');\n            }\n            return new DialogData(config, data).trigger();\n        };\n    }]);\n\n}"],"sourceRoot":"/source/"}